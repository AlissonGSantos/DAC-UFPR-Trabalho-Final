name: Build and Deploy Backend Services

on:
  push:
    branches: ["development"]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      autenticacao:
        description: 'Serviço de autenticação'
        required: false
        default: true
        type: boolean
      cliente:
        description: 'Serviço de clientes'
        required: false
        default: true
        type: boolean
      funcionario:
        description: 'Serviço de funcionários'
        required: false
        default: true
        type: boolean
      reserva:
        description: 'Serviço de reservas'
        required: false
        default: true
        type: boolean
      voo:
        description: 'Serviço de voos'
        required: false
        default: true
        type: boolean
  
jobs:
  detect-projects:
    name: Identificando projetos
    runs-on: ubuntu-latest
    outputs:
      matrix_projects: ${{ steps.set_matrix_projects.outputs.matrix_projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verificando inputs
        id: selected_services
        if: github.event_name == 'workflow_dispatch'
        run: |
          SELECTED=""
          if [ "${{ github.event.inputs.autenticacao }}" == "true" ]; then
            SELECTED="${SELECTED} autenticacao-service"
          fi
          if [ "${{ github.event.inputs.cliente }}" == "true" ]; then
            SELECTED="${SELECTED} cliente-service"
          fi
          if [ "${{ github.event.inputs.funcionario }}" == "true" ]; then
            SELECTED="${SELECTED} funcionario-service"
          fi
          if [ "${{ github.event.inputs.reserva }}" == "true" ]; then
            SELECTED="${SELECTED} reserva-service"
          fi
          if [ "${{ github.event.inputs.voo }}" == "true" ]; then
            SELECTED="${SELECTED} voo-service"
          fi
            SELECTED=$(echo "${SELECTED}" | cut -c2-)
          echo "Projetos selecionados: $SELECTED"
          echo "projects=$SELECTED" >> $GITHUB_OUTPUT
        
      - name: Recuperando arquivos modificados
        id: modified_files
        if: github.event_name == 'push'
        run: |
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Arquivos modificados: $MODIFIED_FILES"
          echo "{files}={$MODIFIED_FILES} >> $GITHUB_OUTPUT"
        
      - name: Recuperando projetos modificados
        id: modified_projects
        if: github.event_name == 'push'
        run: |
          PROJECTS=$(echo "$MODIFIED_FILES" | grep '^backend/' | cut -d'/' -f2 | sort | uniq | tr '\n' ' ' | sed 's/ $//')
          echo "Projetos modificados: $PROJECTS"
          echo "projects=[\"$(echo $PROJECTS | sed 's/ /\",\"/g')\"]" >> $GITHUB_OUTPUT

      - name: Criando matriz de projetos
        id: set_matrix_projects
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            MATRIX_PROJECTS=$(echo "${{ steps.selected_services.outputs.projects }}" | sed 's/ /\",\"/g')
            MATRIX_PROJECTS=$(echo "[\"${MATRIX_PROJECTS}\"]")
          else
            MATRIX_PROJECTS=$(echo "${{ steps.modified_projects.outputs.projects }}" | sed 's/ /\",\"/g')
            MATRIX_PROJECTS=$(echo "[\"${MATRIX_PROJECTS}\"]")
          fi
          echo "Projetos para build: $MATRIX_PROJECTS"
          echo "matrix_projects=$MATRIX_PROJECTS" >> $GITHUB_OUTPUT

  build:
    name: Realizando build dos projetos
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-projects.outputs.matrix_projects) }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurando java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 'Recupera versão do projeto'
        id: pom_version
        run: |
          version=$(cat backend/${{ matrix.project }}/pom.xml | grep -oPm1 "(?<=<version>)[^<]+")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build do projeto
        run: |
          echo "Processo de build para o projeto ${{ matrix.project }}:${{ steps.pom_version.outputs.version }}"
          cd backend/${{ matrix.project }}
          mvn clean install

      - name: Build da imagem Docker
        run: |
          docker build -f backend/Dockerfile -t ${{ matrix.project }}:${{ steps.pom_version.outputs.version }} backend/${{ matrix.project }}